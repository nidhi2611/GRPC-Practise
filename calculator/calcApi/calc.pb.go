// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1-devel
// 	protoc        v3.21.12
// source: calculator/calcApi/calc.proto

package calcApi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// to take input from the user
type InputNumbers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FirstNum  int64 `protobuf:"varint,1,opt,name=first_num,json=firstNum,proto3" json:"first_num,omitempty"`
	SecondNum int64 `protobuf:"varint,2,opt,name=second_num,json=secondNum,proto3" json:"second_num,omitempty"`
}

func (x *InputNumbers) Reset() {
	*x = InputNumbers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_calculator_calcApi_calc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputNumbers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputNumbers) ProtoMessage() {}

func (x *InputNumbers) ProtoReflect() protoreflect.Message {
	mi := &file_calculator_calcApi_calc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputNumbers.ProtoReflect.Descriptor instead.
func (*InputNumbers) Descriptor() ([]byte, []int) {
	return file_calculator_calcApi_calc_proto_rawDescGZIP(), []int{0}
}

func (x *InputNumbers) GetFirstNum() int64 {
	if x != nil {
		return x.FirstNum
	}
	return 0
}

func (x *InputNumbers) GetSecondNum() int64 {
	if x != nil {
		return x.SecondNum
	}
	return 0
}

// wrapping the input into request
type SumRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Input *InputNumbers `protobuf:"bytes,1,opt,name=input,proto3" json:"input,omitempty"`
}

func (x *SumRequest) Reset() {
	*x = SumRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_calculator_calcApi_calc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SumRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SumRequest) ProtoMessage() {}

func (x *SumRequest) ProtoReflect() protoreflect.Message {
	mi := &file_calculator_calcApi_calc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SumRequest.ProtoReflect.Descriptor instead.
func (*SumRequest) Descriptor() ([]byte, []int) {
	return file_calculator_calcApi_calc_proto_rawDescGZIP(), []int{1}
}

func (x *SumRequest) GetInput() *InputNumbers {
	if x != nil {
		return x.Input
	}
	return nil
}

// defining response from API
type SumResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response int64 `protobuf:"varint,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *SumResponse) Reset() {
	*x = SumResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_calculator_calcApi_calc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SumResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SumResponse) ProtoMessage() {}

func (x *SumResponse) ProtoReflect() protoreflect.Message {
	mi := &file_calculator_calcApi_calc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SumResponse.ProtoReflect.Descriptor instead.
func (*SumResponse) Descriptor() ([]byte, []int) {
	return file_calculator_calcApi_calc_proto_rawDescGZIP(), []int{2}
}

func (x *SumResponse) GetResponse() int64 {
	if x != nil {
		return x.Response
	}
	return 0
}

type MultiplicationTableRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Number int64 `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
}

func (x *MultiplicationTableRequest) Reset() {
	*x = MultiplicationTableRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_calculator_calcApi_calc_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiplicationTableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiplicationTableRequest) ProtoMessage() {}

func (x *MultiplicationTableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_calculator_calcApi_calc_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiplicationTableRequest.ProtoReflect.Descriptor instead.
func (*MultiplicationTableRequest) Descriptor() ([]byte, []int) {
	return file_calculator_calcApi_calc_proto_rawDescGZIP(), []int{3}
}

func (x *MultiplicationTableRequest) GetNumber() int64 {
	if x != nil {
		return x.Number
	}
	return 0
}

type MultiplicationTableResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response string `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *MultiplicationTableResponse) Reset() {
	*x = MultiplicationTableResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_calculator_calcApi_calc_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiplicationTableResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiplicationTableResponse) ProtoMessage() {}

func (x *MultiplicationTableResponse) ProtoReflect() protoreflect.Message {
	mi := &file_calculator_calcApi_calc_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiplicationTableResponse.ProtoReflect.Descriptor instead.
func (*MultiplicationTableResponse) Descriptor() ([]byte, []int) {
	return file_calculator_calcApi_calc_proto_rawDescGZIP(), []int{4}
}

func (x *MultiplicationTableResponse) GetResponse() string {
	if x != nil {
		return x.Response
	}
	return ""
}

type MaximumNumberRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Number int64 `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
}

func (x *MaximumNumberRequest) Reset() {
	*x = MaximumNumberRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_calculator_calcApi_calc_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MaximumNumberRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaximumNumberRequest) ProtoMessage() {}

func (x *MaximumNumberRequest) ProtoReflect() protoreflect.Message {
	mi := &file_calculator_calcApi_calc_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaximumNumberRequest.ProtoReflect.Descriptor instead.
func (*MaximumNumberRequest) Descriptor() ([]byte, []int) {
	return file_calculator_calcApi_calc_proto_rawDescGZIP(), []int{5}
}

func (x *MaximumNumberRequest) GetNumber() int64 {
	if x != nil {
		return x.Number
	}
	return 0
}

type MaximumNumberResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response string `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *MaximumNumberResponse) Reset() {
	*x = MaximumNumberResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_calculator_calcApi_calc_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MaximumNumberResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaximumNumberResponse) ProtoMessage() {}

func (x *MaximumNumberResponse) ProtoReflect() protoreflect.Message {
	mi := &file_calculator_calcApi_calc_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaximumNumberResponse.ProtoReflect.Descriptor instead.
func (*MaximumNumberResponse) Descriptor() ([]byte, []int) {
	return file_calculator_calcApi_calc_proto_rawDescGZIP(), []int{6}
}

func (x *MaximumNumberResponse) GetResponse() string {
	if x != nil {
		return x.Response
	}
	return ""
}

type AverageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Number int64 `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
}

func (x *AverageRequest) Reset() {
	*x = AverageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_calculator_calcApi_calc_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AverageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AverageRequest) ProtoMessage() {}

func (x *AverageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_calculator_calcApi_calc_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AverageRequest.ProtoReflect.Descriptor instead.
func (*AverageRequest) Descriptor() ([]byte, []int) {
	return file_calculator_calcApi_calc_proto_rawDescGZIP(), []int{7}
}

func (x *AverageRequest) GetNumber() int64 {
	if x != nil {
		return x.Number
	}
	return 0
}

type AverageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response string `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *AverageResponse) Reset() {
	*x = AverageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_calculator_calcApi_calc_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AverageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AverageResponse) ProtoMessage() {}

func (x *AverageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_calculator_calcApi_calc_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AverageResponse.ProtoReflect.Descriptor instead.
func (*AverageResponse) Descriptor() ([]byte, []int) {
	return file_calculator_calcApi_calc_proto_rawDescGZIP(), []int{8}
}

func (x *AverageResponse) GetResponse() string {
	if x != nil {
		return x.Response
	}
	return ""
}

var File_calculator_calcApi_calc_proto protoreflect.FileDescriptor

var file_calculator_calcApi_calc_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x63, 0x61, 0x6c,
	0x63, 0x41, 0x70, 0x69, 0x2f, 0x63, 0x61, 0x6c, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x63, 0x61, 0x6c, 0x63, 0x41, 0x70, 0x69, 0x22, 0x4a, 0x0a, 0x0c, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x4e, 0x75, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x5f,
	0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x4e, 0x75, 0x6d, 0x22, 0x39, 0x0a, 0x0a, 0x53, 0x75, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2b, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x63, 0x61, 0x6c, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x22,
	0x29, 0x0a, 0x0b, 0x53, 0x75, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x34, 0x0a, 0x1a, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x22, 0x39, 0x0a, 0x1b, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2e, 0x0a, 0x14, 0x4d,
	0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x33, 0x0a, 0x15, 0x4d,
	0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x28, 0x0a, 0x0e, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x2d, 0x0a, 0x0f, 0x41, 0x76,
	0x65, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xb9, 0x02, 0x0a, 0x0b, 0x43, 0x61,
	0x6c, 0x63, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x32, 0x0a, 0x03, 0x53, 0x75, 0x6d,
	0x12, 0x13, 0x2e, 0x63, 0x61, 0x6c, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x53, 0x75, 0x6d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x63, 0x61, 0x6c, 0x63, 0x41, 0x70, 0x69, 0x2e,
	0x53, 0x75, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x64, 0x0a,
	0x13, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x23, 0x2e, 0x63, 0x61, 0x6c, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x63, 0x61, 0x6c, 0x63,
	0x41, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x30, 0x01, 0x12, 0x4c, 0x0a, 0x07, 0x4d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x12, 0x1d,
	0x2e, 0x63, 0x61, 0x6c, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x4d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e,
	0x63, 0x61, 0x6c, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x4d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28,
	0x01, 0x12, 0x42, 0x0a, 0x07, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x12, 0x17, 0x2e, 0x63,
	0x61, 0x6c, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x63, 0x61, 0x6c, 0x63, 0x41, 0x70, 0x69, 0x2e,
	0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x28, 0x01, 0x30, 0x01, 0x42, 0x16, 0x5a, 0x14, 0x2e, 0x2f, 0x63, 0x61, 0x6c, 0x63, 0x75,
	0x6c, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x63, 0x61, 0x6c, 0x63, 0x41, 0x70, 0x69, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_calculator_calcApi_calc_proto_rawDescOnce sync.Once
	file_calculator_calcApi_calc_proto_rawDescData = file_calculator_calcApi_calc_proto_rawDesc
)

func file_calculator_calcApi_calc_proto_rawDescGZIP() []byte {
	file_calculator_calcApi_calc_proto_rawDescOnce.Do(func() {
		file_calculator_calcApi_calc_proto_rawDescData = protoimpl.X.CompressGZIP(file_calculator_calcApi_calc_proto_rawDescData)
	})
	return file_calculator_calcApi_calc_proto_rawDescData
}

var file_calculator_calcApi_calc_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_calculator_calcApi_calc_proto_goTypes = []interface{}{
	(*InputNumbers)(nil),                // 0: calcApi.InputNumbers
	(*SumRequest)(nil),                  // 1: calcApi.SumRequest
	(*SumResponse)(nil),                 // 2: calcApi.SumResponse
	(*MultiplicationTableRequest)(nil),  // 3: calcApi.MultiplicationTableRequest
	(*MultiplicationTableResponse)(nil), // 4: calcApi.MultiplicationTableResponse
	(*MaximumNumberRequest)(nil),        // 5: calcApi.MaximumNumberRequest
	(*MaximumNumberResponse)(nil),       // 6: calcApi.MaximumNumberResponse
	(*AverageRequest)(nil),              // 7: calcApi.AverageRequest
	(*AverageResponse)(nil),             // 8: calcApi.AverageResponse
}
var file_calculator_calcApi_calc_proto_depIdxs = []int32{
	0, // 0: calcApi.SumRequest.input:type_name -> calcApi.InputNumbers
	1, // 1: calcApi.CalcService.Sum:input_type -> calcApi.SumRequest
	3, // 2: calcApi.CalcService.MultiplicationTable:input_type -> calcApi.MultiplicationTableRequest
	5, // 3: calcApi.CalcService.Maximum:input_type -> calcApi.MaximumNumberRequest
	7, // 4: calcApi.CalcService.Average:input_type -> calcApi.AverageRequest
	2, // 5: calcApi.CalcService.Sum:output_type -> calcApi.SumResponse
	4, // 6: calcApi.CalcService.MultiplicationTable:output_type -> calcApi.MultiplicationTableResponse
	6, // 7: calcApi.CalcService.Maximum:output_type -> calcApi.MaximumNumberResponse
	8, // 8: calcApi.CalcService.Average:output_type -> calcApi.AverageResponse
	5, // [5:9] is the sub-list for method output_type
	1, // [1:5] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_calculator_calcApi_calc_proto_init() }
func file_calculator_calcApi_calc_proto_init() {
	if File_calculator_calcApi_calc_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_calculator_calcApi_calc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputNumbers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_calculator_calcApi_calc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SumRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_calculator_calcApi_calc_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SumResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_calculator_calcApi_calc_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiplicationTableRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_calculator_calcApi_calc_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiplicationTableResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_calculator_calcApi_calc_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MaximumNumberRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_calculator_calcApi_calc_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MaximumNumberResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_calculator_calcApi_calc_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AverageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_calculator_calcApi_calc_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AverageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_calculator_calcApi_calc_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_calculator_calcApi_calc_proto_goTypes,
		DependencyIndexes: file_calculator_calcApi_calc_proto_depIdxs,
		MessageInfos:      file_calculator_calcApi_calc_proto_msgTypes,
	}.Build()
	File_calculator_calcApi_calc_proto = out.File
	file_calculator_calcApi_calc_proto_rawDesc = nil
	file_calculator_calcApi_calc_proto_goTypes = nil
	file_calculator_calcApi_calc_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CalcServiceClient is the client API for CalcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CalcServiceClient interface {
	// Unary Call for sum
	Sum(ctx context.Context, in *SumRequest, opts ...grpc.CallOption) (*SumResponse, error)
	// Server Streaming for Multiplication Table
	MultiplicationTable(ctx context.Context, in *MultiplicationTableRequest, opts ...grpc.CallOption) (CalcService_MultiplicationTableClient, error)
	// Client Streaming for maximum number out of given numbers
	Maximum(ctx context.Context, opts ...grpc.CallOption) (CalcService_MaximumClient, error)
	// Bidirectional Streaming for average
	Average(ctx context.Context, opts ...grpc.CallOption) (CalcService_AverageClient, error)
}

type calcServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCalcServiceClient(cc grpc.ClientConnInterface) CalcServiceClient {
	return &calcServiceClient{cc}
}

func (c *calcServiceClient) Sum(ctx context.Context, in *SumRequest, opts ...grpc.CallOption) (*SumResponse, error) {
	out := new(SumResponse)
	err := c.cc.Invoke(ctx, "/calcApi.CalcService/Sum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calcServiceClient) MultiplicationTable(ctx context.Context, in *MultiplicationTableRequest, opts ...grpc.CallOption) (CalcService_MultiplicationTableClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CalcService_serviceDesc.Streams[0], "/calcApi.CalcService/MultiplicationTable", opts...)
	if err != nil {
		return nil, err
	}
	x := &calcServiceMultiplicationTableClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CalcService_MultiplicationTableClient interface {
	Recv() (*MultiplicationTableResponse, error)
	grpc.ClientStream
}

type calcServiceMultiplicationTableClient struct {
	grpc.ClientStream
}

func (x *calcServiceMultiplicationTableClient) Recv() (*MultiplicationTableResponse, error) {
	m := new(MultiplicationTableResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *calcServiceClient) Maximum(ctx context.Context, opts ...grpc.CallOption) (CalcService_MaximumClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CalcService_serviceDesc.Streams[1], "/calcApi.CalcService/Maximum", opts...)
	if err != nil {
		return nil, err
	}
	x := &calcServiceMaximumClient{stream}
	return x, nil
}

type CalcService_MaximumClient interface {
	Send(*MaximumNumberRequest) error
	CloseAndRecv() (*MaximumNumberResponse, error)
	grpc.ClientStream
}

type calcServiceMaximumClient struct {
	grpc.ClientStream
}

func (x *calcServiceMaximumClient) Send(m *MaximumNumberRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *calcServiceMaximumClient) CloseAndRecv() (*MaximumNumberResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(MaximumNumberResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *calcServiceClient) Average(ctx context.Context, opts ...grpc.CallOption) (CalcService_AverageClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CalcService_serviceDesc.Streams[2], "/calcApi.CalcService/Average", opts...)
	if err != nil {
		return nil, err
	}
	x := &calcServiceAverageClient{stream}
	return x, nil
}

type CalcService_AverageClient interface {
	Send(*AverageRequest) error
	Recv() (*AverageResponse, error)
	grpc.ClientStream
}

type calcServiceAverageClient struct {
	grpc.ClientStream
}

func (x *calcServiceAverageClient) Send(m *AverageRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *calcServiceAverageClient) Recv() (*AverageResponse, error) {
	m := new(AverageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CalcServiceServer is the server API for CalcService service.
type CalcServiceServer interface {
	// Unary Call for sum
	Sum(context.Context, *SumRequest) (*SumResponse, error)
	// Server Streaming for Multiplication Table
	MultiplicationTable(*MultiplicationTableRequest, CalcService_MultiplicationTableServer) error
	// Client Streaming for maximum number out of given numbers
	Maximum(CalcService_MaximumServer) error
	// Bidirectional Streaming for average
	Average(CalcService_AverageServer) error
}

// UnimplementedCalcServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCalcServiceServer struct {
}

func (*UnimplementedCalcServiceServer) Sum(context.Context, *SumRequest) (*SumResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sum not implemented")
}
func (*UnimplementedCalcServiceServer) MultiplicationTable(*MultiplicationTableRequest, CalcService_MultiplicationTableServer) error {
	return status.Errorf(codes.Unimplemented, "method MultiplicationTable not implemented")
}
func (*UnimplementedCalcServiceServer) Maximum(CalcService_MaximumServer) error {
	return status.Errorf(codes.Unimplemented, "method Maximum not implemented")
}
func (*UnimplementedCalcServiceServer) Average(CalcService_AverageServer) error {
	return status.Errorf(codes.Unimplemented, "method Average not implemented")
}

func RegisterCalcServiceServer(s *grpc.Server, srv CalcServiceServer) {
	s.RegisterService(&_CalcService_serviceDesc, srv)
}

func _CalcService_Sum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalcServiceServer).Sum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calcApi.CalcService/Sum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalcServiceServer).Sum(ctx, req.(*SumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CalcService_MultiplicationTable_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MultiplicationTableRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CalcServiceServer).MultiplicationTable(m, &calcServiceMultiplicationTableServer{stream})
}

type CalcService_MultiplicationTableServer interface {
	Send(*MultiplicationTableResponse) error
	grpc.ServerStream
}

type calcServiceMultiplicationTableServer struct {
	grpc.ServerStream
}

func (x *calcServiceMultiplicationTableServer) Send(m *MultiplicationTableResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _CalcService_Maximum_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CalcServiceServer).Maximum(&calcServiceMaximumServer{stream})
}

type CalcService_MaximumServer interface {
	SendAndClose(*MaximumNumberResponse) error
	Recv() (*MaximumNumberRequest, error)
	grpc.ServerStream
}

type calcServiceMaximumServer struct {
	grpc.ServerStream
}

func (x *calcServiceMaximumServer) SendAndClose(m *MaximumNumberResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *calcServiceMaximumServer) Recv() (*MaximumNumberRequest, error) {
	m := new(MaximumNumberRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _CalcService_Average_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CalcServiceServer).Average(&calcServiceAverageServer{stream})
}

type CalcService_AverageServer interface {
	Send(*AverageResponse) error
	Recv() (*AverageRequest, error)
	grpc.ServerStream
}

type calcServiceAverageServer struct {
	grpc.ServerStream
}

func (x *calcServiceAverageServer) Send(m *AverageResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *calcServiceAverageServer) Recv() (*AverageRequest, error) {
	m := new(AverageRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _CalcService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "calcApi.CalcService",
	HandlerType: (*CalcServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Sum",
			Handler:    _CalcService_Sum_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "MultiplicationTable",
			Handler:       _CalcService_MultiplicationTable_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Maximum",
			Handler:       _CalcService_Maximum_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Average",
			Handler:       _CalcService_Average_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "calculator/calcApi/calc.proto",
}
